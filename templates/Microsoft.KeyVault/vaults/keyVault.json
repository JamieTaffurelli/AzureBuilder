{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.1.0",
  "parameters": {
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Key Vault."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": ["northeurope", "westeurope"],
      "metadata": {
        "description": "Location of the Key Vault."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the Key Vault."
      }
    },
    "accessPolicies": {
      "type": "array",
      "metadata": {
        "description": "Access Policies for accounts to access Key Vault objects"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": ["Standard", "Premium"],
      "metadata": {
        "description": "Specifies whether the Key Vault is a standard vault or a premium vault."
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enables VMs to use secrets and certificates in Key Vault"
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "createMode": {
      "type": "string",
      "defaultValue": "default",
      "allowedValues": ["default", "recover"],
      "metadata": {
        "description": "Specifies whether its a new Key Vault or one that is being recovered"
      }
    },
    "bypass": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": ["None", "AzureServices"],
      "metadata": {
        "description": "Specifies what traffic can bypass network ACLs."
      }
    },
    "ipRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of IP addresses to allow traffic from"
      }
    },
    "virtualNetworkRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of subnet IDs to allow traffic from"
      }
    },
    "logAnalyticsSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "The Subscription ID of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "logAnalyticsResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The Resource Group of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "logAnalyticsName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "tags": {
      "type": "object"
    }
  },
  "variables": {
    "tenantIdObject": {
      "tenantId": "[parameters('tenantId')]"
    },
    "accessPolicies": {
      "copy": [
        {
          "name": "accessPolicies",
          "count": "[length(parameters('accessPolicies'))]",
          "input": "[union(parameters('accessPolicies')[copyIndex('accessPolicies')], variables('tenantIdObject'))]"
        }
      ]
    },
    "ipRules": {
      "copy": [
        {
          "name": "ipRules",
          "count": "[if(empty(parameters('ipRules')), 1, length(parameters('ipRules')))]",
          "input": {
            "value": "[if(empty(parameters('ipRules')), 'dummyIp', parameters('ipRules')[copyIndex('ipRules')])]"
          }
        }
      ]
    },
    "virtualNetworkRules": {
      "copy": [
        {
          "name": "virtualNetworkRules",
          "count": "[if(empty(parameters('virtualNetworkRules')), 1, length(parameters('virtualNetworkRules')))]",
          "input": {
            "id": "[if(empty(parameters('virtualNetworkRules')), 'dummyVNetRule', parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')])]"
          }
        }
      ]
    },
    "diagnosticsEnabled": true,
    "diagnosticsRetentionInDays": 365
  },
  "resources": [
    {
      "name": "[parameters('keyVaultName')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "tenantId": "[parameters('tenantId')]",
        "sku": {
          "family": "A",
          "name": "[parameters('skuName')]"
        },
        "accessPolicies": "[variables('accessPolicies').accessPolicies]",
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "enableSoftDelete": true,
        "createMode": "[parameters('createMode')]",
        "enablePurgeProtection": true,
        "networkAcls": {
          "bypass": "[parameters('bypass')]",
          "defaultAction": "Deny",
          "ipRules": "[if(empty(parameters('ipRules')), json('[]'), variables('ipRules').ipRules)]",
          "virtualNetworkRules": "[if(empty(parameters('virtualNetworkRules')), json('[]'), variables('virtualNetworkRules').virtualNetworkRules)]"
        }
      },
      "resources": [
        {
          "apiVersion": "2015-07-01",
          "type": "/providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "properties": {
            "metrics": [
              {
                "category": "AllMetrics",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              }
            ],
            "logs": [
              {
                "category": "AuditEvent",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              }
            ],
            "workspaceId": "[resourceId(parameters('logAnalyticsSubscriptionId'), parameters('logAnalyticsResourceGroupName'), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
          },
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
          ]
        }
      ]
    }
  ],
  "outputs": {
    "keyVault": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2018-02-14', 'Full')]"
    }
  }
}
