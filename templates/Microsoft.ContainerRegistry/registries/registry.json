{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.1.0",
  "parameters": {
    "registryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Container Registry you wish to create"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": ["northeurope", "westeurope"],
      "metadata": {
        "description": "The location to deploy the Container Registry to"
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": ["Basic", "Standard", "Premium"],
      "metadata": {
        "description": "The sku of the Container Registry"
      }
    },
    "adminUserEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable admin user on the container registry"
      }
    },
    "virtualNetworkRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Allow or Deny traffic from subnets, allowed properties are: subnetId (resource ID of subnet) and action (Allow or Deny, defaults to defaultAction)"
      }
    },
    "ipRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Allow or Deny traffic from an IP or CIDR range, allowed properties are: value (must be IPv4) and action (Allow or Deny, defaults to defaultAction)"
      }
    },
    "quarantinePolicy": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": ["Enabled", "Disabled"],
      "metadata": {
        "description": "Enable or Disable container quarantine"
      }
    },
    "trustPolicy": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": ["Enabled", "Disabled"],
      "metadata": {
        "description": "Enable or Disable purging of untagged manifest"
      }
    },
    "retentionDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "number of days before deleting untagged manifests"
      }
    },
    "retentionPolicy": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": ["Enabled", "Disabled"],
      "metadata": {
        "description": "Enable or Disable the retention policy"
      }
    },
    "dataEndpointEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable FQDN of container registry"
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": ["Enabled", "Disabled"],
      "metadata": {
        "description": "Enable or Disable public access to Container Registry"
      }
    },
    "logAnalyticsSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "The Subscription ID of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "logAnalyticsResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The Resource Group of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "logAnalyticsName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "description": "Tags to apply to Container Registry"
      }
    }
  },
  "variables": {
    "defaultAction": "Allow",
    "virtualNetworkRules": {
      "copy": [
        {
          "name": "virtualNetworkRules",
          "count": "[if(empty(parameters('virtualNetworkRules')), 1, length(parameters('virtualNetworkRules')))]",
          "input": {
            "id": "[if(empty(parameters('virtualNetworkRules')), 'dummyId', resourceId(if(contains(parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')], 'virtualNetworkSubscriptionId'), parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].virtualNetworkSubscriptionId, subscription().subscriptionId), if(contains(parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')], 'virtualNetworkResourceGroupName'), parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].virtualNetworkResourceGroupName, resourceGroup().name), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].virtualNetworkName, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnetName))]",
            "action": "[if(empty(parameters('virtualNetworkRules')), 'dummyAction', if(contains(parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')], 'action'), parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].action, variables('defaultaction')))]"
          }
        }
      ]
    },
    "ipRules": {
      "copy": [
        {
          "name": "ipRules",
          "count": "[if(empty(parameters('ipRules')), 1, length(parameters('ipRules')))]",
          "input": {
            "value": "[if(empty(parameters('ipRules')), 'dummyId', parameters('ipRules')[copyIndex('ipRules')].value)]",
            "action": "[if(empty(parameters('ipRules')), 'dummyAction', if(contains(parameters('ipRules')[copyIndex('ipRules')], 'action'), parameters('ipRules')[copyIndex('ipRules')].action, variables('defaultAction')))]"
          }
        }
      ]
    },
    "diagnosticsEnabled": true,
    "diagnosticsRetentionInDays": 365
  },
  "resources": [
    {
      "name": "[parameters('registryName')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2019-12-01-preview",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "adminUserEnabled": "[parameters('adminUserEnabled')]",
        "networkRuleSet": {
          "defaultAction": "[variables('defaultAction')]",
          "virtualNetworkRules": "[variables('virtualNetworkRules')]",
          "ipRules": "[variables('ipRules')]"
        },
        "policies": {
          "quarantinePolicy": {
            "status": "[parameters('quarantinePolicy')]"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "[parameters('trustPolicy')]"
          },
          "retentionPolicy": {
            "days": "[parameters('retentionDays')]",
            "status": "[parameters('retentionPolicy')]"
          }
        },
        "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
      },
      "resources": [
        {
          "apiVersion": "2015-07-01",
          "type": "/providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "properties": {
            "metrics": [
              {
                "category": "AllMetrics",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              }
            ],
            "logs": [
              {
                "category": "ContainerRegistryLoginEvents",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              },
              {
                "category": "ContainerRegistryRepositoryEvents",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              }
            ],
            "workspaceId": "[resourceId(parameters('logAnalyticsSubscriptionId'), parameters('logAnalyticsResourceGroupName'), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
          },
          "dependsOn": [
            "[concat('Microsoft.ContainerRegistry/registries/', parameters('registryName'))]"
          ]
        }
      ]
    }
  ],
  "outputs": {
    "registry": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2019-12-01-preview', 'Full')]"
    }
  }
}
