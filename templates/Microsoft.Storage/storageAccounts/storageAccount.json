{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.2.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "The name of the Storage Account"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "northeurope",
        "westeurope"
      ],
      "metadata": {
        "description": "The location to deploy the Storage Account to"
      }
    },
    "kind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "Storage",
        "StorageV2",
        "BlobStorage",
        "FileStorage",
        "BlockBlobStorage"
      ],
      "metadata": {
        "description": "Type of Storage Account to deploy"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS"
      ],
      "metadata": {
        "description": "Sku name to determine geo-replication and storage architecture (HDD or SSD) of Storage Account"
      }
    },
    "customDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom user domain to assign to Storage Account, uses CNAME source"
      }
    },
    "bypass": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "Logging",
        "Metrics",
        "AzureServices",
        "Logging, Metrics",
        "Logging, AzureServices",
        "Metrics, AzureServices",
        "Logging, Metrics, AzureServices"
      ],
      "metadata": {
        "description": "Bypass network ACLs for Storage Account traffic"
      }
    },
    "virtualNetworkRules": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "Allow or Deny traffic from subnets, allowed properties are: subnetId (resource ID of subnet) and action (Allow or Deny, defaults to defaultAction)"
      }
    },
    "ipRules": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "Allow or Deny traffic from an IP or CIDR range, allowed properties are: value (must be IPv4) and action (Allow or Deny, defaults to defaultAction)"
      }
    },
    "accessTier": {
      "type": "string",
      "defaultValue": "Hot",
      "allowedValues": [
        "Hot",
        "Cool"
      ],
      "metadata": {
        "description": "Only for BlobStorage storage account kinds, define latency of data transfer"
      }
    },
    "corsRules": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "Cross Origin Resource Sharing rules"
      }
    },
    "retentionDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 1,
      "maxValue": 365,
      "metadata": {
        "description": "Number of days to retain deleted blobs"
      }
    },
    "automaticSnapshotEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable auto snapshot of blobs"
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "description": "Tags to apply to Storage Account"
      }
    }
  },
  "variables": {
    "defaultAction": "Allow",
    "virtualNetworkRules": {
      "copy": [
        {
          "name": "virtualNetworkRules",
          "count": "[if(empty(parameters('virtualNetworkRules')), 1, length(parameters('virtualNetworkRules')))]",
          "input": {
            "id": "[if(empty(parameters('virtualNetworkRules')), 'dummyId', resourceId(if(contains(parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')], 'virtualNetworkSubscriptionId'), parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].virtualNetworkSubscriptionId, subscription().subscriptionId), if(contains(parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')], 'virtualNetworkResourceGroupName'), parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].virtualNetworkResourceGroupName, resourceGroup().name), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].virtualNetworkName, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnetName))]",
            "action": "[if(empty(parameters('virtualNetworkRules')), 'dummyAction', if(contains(parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')], 'action'), parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].action, variables('defaultaction')))]"
          }
        }
      ]
    },
    "ipRules": {
      "copy": [
        {
          "name": "ipRules",
          "count": "[if(empty(parameters('ipRules')), 1, length(parameters('ipRules')))]",
          "input": {
            "value": "[if(empty(parameters('ipRules')), 'dummyId', parameters('ipRules')[copyIndex('ipRules')].value)]",
            "action": "[if(empty(parameters('ipRules')), 'dummyAction', if(contains(parameters('ipRules')[copyIndex('ipRules')], 'action'), parameters('ipRules')[copyIndex('ipRules')].action, variables('defaultAction')))]"
          }
        }
      ]
    }
  },
  "resources": [
    {
      "name": "[parameters('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-11-01",
      "kind": "[parameters('kind')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('skuName')]"
      },
      "properties": {
        "customDomain": {
          "name": "[parameters('customDomainName')]"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "networkAcls": {
          "bypass": "[parameters('bypass')]",
          "virtualNetworkRules": "[if(empty(parameters('virtualNetworkRules')), json('[]'), variables('virtualNetworkRules').virtualNetworkRules)]",
          "ipRules": "[if(empty(parameters('ipRules')), json('[]'), variables('ipRules').ipRules)]",
          "defaultAction": "Deny"
        },
        "supportsHttpsTrafficOnly": true,
        "accessTier": "[if(equals(parameters('kind'),'BlobStorage'), parameters('accessTier'), json('null'))]"
      },
      "resources": [
        {
          "type": "providers/advancedThreatProtectionSettings",
          "name": "Microsoft.Security/current",
          "apiVersion": "2019-01-01",
          "properties": {
            "isEnabled": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
          ]
        }
      ]
    },
    {
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-04-01",
      "properties": {
        "cors": {
          "corsRules": "[parameters('corsRules')]"
        },
        "deleteRetentionPolicy": {
          "enabled": true,
          "days": "[parameters('retentionDays')]"
        },
        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotEnabled')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ]
    }
  ]
}
