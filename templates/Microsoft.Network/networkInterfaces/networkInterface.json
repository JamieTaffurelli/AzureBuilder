{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "2.0.0.0",
  "parameters": {
    "nicName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "The name of the Network Interface that you wish to create."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": ["northeurope", "westeurope"],
      "metadata": {
        "description": "The location to deploy the Network Interface to"
      }
    },
    "ipConfigurations": {
      "type": "array",
      "metadata": {
        "description": "IP configurations for the Network Interface"
      }
    },
    "dnsServers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Specifies DNS servers the Network Interface should use, default is Azure Provided DNS"
      }
    },
    "internalDnsNameLabel": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Relative DNS name for Network Interface for communication between VMs in the same Virtual Network"
      }
    },
    "internalFqdn": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Fully qualified DNS name for Network Interface for communication between VMs in the same Virtual Network"
      }
    },
    "internalDomainNameSuffix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "DNS suffix for Network Interface, full DNS name can be obtained by concatenating VM name with DNS suffix"
      }
    },
    "primary": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Sets this Network Interface as the Primary Network Interface on a VM"
      }
    },
    "enableAcceleratedNetworking": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enables bypassing of host and switch whilst maintaining policies"
      }
    },
    "enableIpForwarding": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Allows forwarding of traffic to other IP addresses"
      }
    },
    "tags": {
      "type": "object"
    }
  },
  "variables": {
    "ipConfigurationsProperties": {
      "copy": [
        {
          "name": "ipConfigurationsProperties",
          "count": "[length(parameters('ipConfigurations'))]",
          "input": {
              "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')], 'privateIPAllocationMethod'), parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')].privateIPAllocationMethod, 'Static')]",
              "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')], 'privateIPAddress'), parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')].privateIPAddress, json('null'))]",
              "subnet": {
                "id": "[resourceId(if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')], 'subnetSubscriptionId'), parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')].subnetSubscriptionId, subscription().subscriptionId), if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')], 'subnetResourceGroupName'), parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')].subnetResourceGroupName, resourceGroup().name), 'Microsoft.Network/virtualNetworks/subnets', parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')].virtualNetworkName, parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')].subnetName)]"
              },
              "primary": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')], 'isPrimary'), parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')].isPrimary, json('true'))]",
              "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurationsProperties')].privateIPAddressVersion, 'IPv4')]"
          }
        }
      ]
    },
    "publicIps": {
      "copy": [
        {
          "name": "publicIps",
          "count": "[length(parameters('ipConfigurations'))]",
          "input": {
            "publicIPAddress": {
              "id": "[if(contains(parameters('ipConfigurations')[copyIndex('publicIps')], 'publicIpAddressName'), resourceId(if(contains(parameters('ipConfigurations')[copyIndex('publicIps')], 'publicIpAddressSubscriptionId'), parameters('ipConfigurations')[copyIndex('publicIps')].publicIpAddressSubscriptionId, subscription().subscriptionId), if(contains(parameters('ipConfigurations')[copyIndex('publicIps')], 'publicIpAddressResourceGroupName'), parameters('ipConfigurations')[copyIndex('publicIps')].publicIpAddressResourceGroupName, resourceGroup().name), 'Microsoft.Network/publicIPAddresses', parameters('ipConfigurations')[copyIndex('publicIps')].publicIpAddressName), '')]"
            }
          }
        }
      ]
    },
    "ipConfigurationsPublic": {
      "copy": [
        {
          "name": "ipConfigurationsPublic",
          "count": "[length(parameters('ipConfigurations'))]",
          "input": {
            "name": "[parameters('ipConfigurations')[copyIndex('ipConfigurationsPublic')].name]",
            "properties": "[if(equals(variables('publicIps').publicIps[copyIndex('ipConfigurationsPublic')].publicIPAddress.id, ''), variables('ipConfigurationsProperties').ipConfigurationsProperties[copyIndex('ipConfigurationsPublic')], union(variables('ipConfigurationsProperties').ipConfigurationsProperties[copyIndex('ipConfigurationsPublic')], variables('publicIps').publicIps[copyIndex('ipConfigurationsPublic')]))]"
          }
        }
      ]
    }
  },
  "resources": [
    {
      "name": "[parameters('nicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "ipConfigurations": "[variables('ipConfigurationsPublic').ipConfigurationsPublic]",
        "dnsSettings": {
          "dnsServers": "[parameters('dnsServers')]",
          "internalDnsNameLabel": "[if(empty(parameters('internalDnsNameLabel')), json('null'), parameters('internalDnsNameLabel'))]",
          "internalFqdn": "[parameters('internalFqdn')]",
          "internalDomainNameSuffix": "[parameters('internalDomainNameSuffix')]"
        },
        "primary": "[parameters('primary')]",
        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
        "enableIPForwarding": "[parameters('enableIPForwarding')]"
      }
    }
  ],
  "outputs": {
    "networkInterface": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('nicName')), '2020-06-01', 'Full')]"
    }
  }
}
