{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appGatewayName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Application Gateway that you wish to create."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": ["northeurope", "westeurope"],
      "metadata": {
        "description": "The location to deploy the Application Gateway to"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "WAF_Medium",
      "allowedValues": ["WAF_Medium", "WAF_Large", "WAF_v2"],
      "metadata": {
        "description": "The sku of the Application Gateway"
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 0,
      "maxValue": 125,
      "metadata": {
        "description": "The number of instances of the Application Gateway"
      }
    },
    "gatewayIpConfigurations": {
      "type": "array",
      "metadata": {
        "description": "Subnets for the App Gateway, e.g {'name':'ipconfig', 'subnetResourceGroup':'rg', 'virtualNetwork':'vnet', 'subnetName':'subnet' }"
      }
    },
    "authenticationCertificates": {
      "type": "array",
      "maxLength": 100,
      "defaultValue": [],
      "metadata": {
        "description": "Authentication certificates for the App Gateway"
      }
    },
    "trustedRootCertificates": {
      "type": "array",
      "maxLength": 100,
      "defaultValue": [],
      "metadata": {
        "description": "Trusted root certificates for the App Gateway"
      }
    },
    "sslCertificates": {
      "type": "array",
      "maxLength": 100,
      "defaultValue": [],
      "metadata": {
        "description": "SSL certificates for the App Gateway"
      }
    },
    "frontendIPConfigurations": {
      "type": "array",
      "minLength": 1,
      "maxLength": 2,
      "metadata": {
        "description": "Frontend IP addresses for the App Gateway"
      }
    },
    "frontendPorts": {
      "type": "array",
      "defaultValue": [
        {
          "name": "https",
          "properties": {
            "port": 80
          }
        }
      ],
      "minLength": 1,
      "maxLength": 100,
      "metadata": {
        "description": "Frontend ports for the App Gateway"
      }
    },
    "probes": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "backendAddressPools": {
      "type": "array",
      "minLength": 1,
      "maxLength": 100,
      "metadata": {
        "description": "Backend addresses for the App Gateway"
      }
    },
    "backendHttpSettingsCollection": {
      "type": "array",
      "minLength": 1,
      "maxLength": 100,
      "metadata": {
        "description": "Backend HTTP settings for the App Gateway"
      }
    },
    "httpListeners": {
      "type": "array",
      "minLength": 1,
      "maxLength": 100,
      "metadata": {
        "description": "HTTP listeners for the App Gateway"
      }
    },
    "urlPathMaps": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "requestRoutingRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "rewriteRuleSets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "redirectConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "firewallMode": {
      "type": "string",
      "defaultValue": "Prevention",
      "allowedValues": ["Detection", "Prevention"],
      "metadata": {
        "description": "Monitor or block WAF violating traffic"
      }
    },
    "disabledRuleGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Set of disabled WAF rules"
      }
    },
    "maxRequestBodySizeInKb": {
      "type": "int",
      "defaultValue": 128,
      "minValue": 1,
      "maxValue": 128,
      "metadata": {
        "description": "Maximum size allowed for request body in KB"
      }
    },
    "fileUploadLimitInMb": {
      "type": "int",
      "defaultValue": 100,
      "minValue": 1,
      "maxValue": 500,
      "metadata": {
        "description": "Maximum size allowed for uploaded files in MB, max value for standard sku is 100MB and large sku is 500 MB"
      }
    },
    "exclusions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Exclude request attributes from WAF, properties are 'matchVariable', 'selectorMatchOperator', 'selector'"
      }
    },
    "autoScaleConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Enable autoscaling for Application Gateway (only supported for V2), properties are 'minCapacity', 'maxCapacity'"
      }
    },
    "customErrorConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Custom Error Pages on Application Gateway for HttpStatus403 or HttpStatus502, properties are 'statusCode', 'customErrorPageUrl'"
      }
    },
    "zones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Specify zone redundancy for the App Gateway, only support with V2"
      }
    },
    "tags": {
      "type": "object"
    }
  },
  "variables": {
    "skuTier": "[if(contains(createArray('WAF_Medium', 'WAF_Large'), parameters('skuName')), 'WAF', parameters('skuName'))]",
    "autoscaleConfiguration": "[if(empty(parameters('autoScaleConfiguration')), json('null'), parameters('autoScaleConfiguration'))]",
    "gatewayIpConfigurations": {
      "copy": [
        {
          "name": "gatewayIpConfigurations",
          "count": "[length(parameters('gatewayIpConfigurations'))]",
          "input": {
            "name": "[parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].name]",
            "properties": {
              "subnet": {
                "id": "[resourceId(if(contains(parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')], 'subnetSubscriptionId'), parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].subnetSubscriptionId, subscription().subscriptionId), if(contains(parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')], 'subnetResourceGroupName'), parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].subnetResourceGroupName, resourceGroup().name), 'Microsoft.Network/virtualNetworks/subnets', parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].virtualNetworkName, parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].subnetName)]"
              }
            }
          }
        }
      ]
    },
    "frontendIPConfigurations": {
      "copy": [
        {
          "name": "frontendIPConfigurations",
          "count": "[length(parameters('frontendIPConfigurations'))]",
          "input": {
            "name": "[parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].name]",
            "properties": "[if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressName'), json(concat('{ \"publicIPAddress\": {\"id\": \"', resourceId(if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressSubscriptionId'), parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].publicIPAddressSubscriptionId, subscription().subscriptionId), if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressResourceGroupName'), parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].publicIPAddressResourceGroupName, resourceGroup().name), 'Microsoft.Network/publicIPAddresses', parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].publicIPAddressName), '\"}}')), json(concat('{', if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'privateIPAllocationMethod'), concat('\"privateIPAllocationMethod\": \"', parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].privateIPAllocationMethod, '\",'), ''), if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'privateIPAddress'), concat('\"privateIPAddress\": \"', parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].privateIPAddress, '\",'), ''),'\"subnet\": {\"id\": \"', resourceId(if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'subnetSubscriptionId'), parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].subnetSubscriptionId, subscription().subscriptionId), if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'subnetResourceGroupName'), parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].subentResourceGroupName, resourceGroup().name), 'Microsoft.Network/virtualNetworks/subnets', parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].virtualNetworkName, parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].subnetName), '\"}}')))]"
          }
        }
      ]
    },
    "httpListeners": [
      {
        "name": "HTTP1",
        "properties": {
          "frontendIPConfiguration": {
            "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', 'z-uki-en1-shrd-sb-agw0101-jamiet', 'frontconfig1')]"
          },
          "frontendPort": {
            "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', 'z-uki-en1-shrd-sb-agw0101-jamiet', 'https')]"
          },
          "protocol": "http"
        }
      }
    ],
    "requestRoutingRules": [
      {
        "name": "HTTP1",
        "properties": {
          "httpListener": {
            "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', 'z-uki-en1-shrd-sb-agw0101-jamiet', 'HTTP1')]"
          },
          "backendAddressPool": {
            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', 'z-uki-en1-shrd-sb-agw0101-jamiet', 'backend1')]"
          },
          "backendHttpSettings": {
            "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', 'z-uki-en1-shrd-sb-agw0101-jamiet', 'backendHTTP1')]"
          }
        }
      }
    ]
  },
  "resources": [
    {
      "name": "[parameters('appGatewayName')]",
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2019-04-01",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "[parameters('skuName')]",
          "tier": "[variables('skuTier')]",
          "capacity": "[parameters('capacity')]"
        },
        "sslPolicy": {
          "policyType": "Predefined",
          "policyName": "AppGwSslPolicy20170401S"
        },
        "gatewayIPConfigurations": "[variables('gatewayIpConfigurations').gatewayIpConfigurations]",
        "authenticationCertificates": "[parameters('authenticationCertificates')]",
        "trustedRootCertificates": "[parameters('trustedRootCertificates')]",
        "sslCertificates": "[parameters('sslCertificates')]",
        "frontendIPConfigurations": "[variables('frontendIPConfigurations').frontendIPConfigurations]",
        "frontendPorts": "[parameters('frontendPorts')]",
        "probes": "[parameters('probes')]",
        "backendAddressPools": "[parameters('backendAddressPools')]",
        "backendHttpSettingsCollection": "[parameters('backendHttpSettingsCollection')]",
        "httpListeners": "[parameters('httpListeners')]",
        //"httpListeners": "[variables('httpListeners')]",
        "urlPathMaps": "[parameters('urlPathMaps')]",
        //"requestRoutingRules": "[parameters('requestRoutingRules')]",
        "requestRoutingRules": "[variables('requestRoutingRules')]",
        "rewriteRuleSets": "[parameters('rewriteRuleSets')]",
        "redirectConfigurations": "[parameters('redirectConfigurations')]",
        "webApplicationFirewallConfiguration": {
          "enabled": true,
          "firewallMode": "[parameters('firewallMode')]",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.0",
          "disabledRuleGroups": "[parameters('disabledRuleGroups')]",
          "requestBodyCheck": true,
          "maxRequestBodySizeInKb": "[parameters('maxRequestBodySizeInKb')]",
          "fileUploadLimitInMb": "[parameters('fileUploadLimitInMb')]",
          "exclusions": "[parameters('exclusions')]"
        },
        "enableHttp2": true,
        //"autoscaleConfiguration": "[variables('autoscaleConfiguration')]",
        "customErrorConfigurations": "[parameters('customErrorConfigurations')]"
      },
      "zones": "[parameters('zones')]"
    }
  ],
  "outputs": {
    "applicationGateway": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2019-04-01', 'Full')]"
    }
  }
}
