trigger:
- master

pool:
  name: 'Hosted Windows Container'

variables:
  System.Debug: false

steps:
- task: PowerShell@2
  displayName: 'Install Required PowerShell Modules'
  inputs:
    targetType: 'filePath'
    filePath: '$(System.DefaultWorkingDirectory)\install-modules.ps1'
    arguments: '@("az", "Pester")'
    errorActionPreference: 'stop'
    failOnStderr: false
    ignoreLASTEXITCODE: false
    pwsh: false
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: AzurePowerShell@4
  displayName: 'Create Test Resource Group'
  inputs:
    azureSubscription: 'rg1'
    scriptType: 'FilePath'
    scriptPath: '$(System.DefaultWorkingDirectory)\scripts\new-test-resource-group.ps1'
    errorActionPreference: 'stop'
    failOnStandardError: false
    azurePowerShellVersion: 'latestVersion'

- task: AzurePowerShell@4
  displayName: 'Run Unit Tests'
  inputs:
    azureSubscription: 'rg1'
    scriptType: 'FilePath'
    scriptPath: '$(System.DefaultWorkingDirectory)\execute-tests.ps1'
    errorActionPreference: 'stop'
    failOnStandardError: false
    azurePowerShellVersion: 'latestVersion'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: 'test-results.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: false
    failTaskOnFailedTests: false
    publishRunAttachments: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)\code-coverage.xml'
    failIfCoverageEmpty: true

- task: AzurePowerShell@4
  displayName: 'Delete Test Resource Group'
  inputs:
    azureSubscription: 'rg1'
    scriptType: 'FilePath'
    scriptPath: '$(System.DefaultWorkingDirectory)\scripts\remove-test-resource-group.ps1'
    errorActionPreference: 'stop'
    failOnStandardError: false
    azurePowerShellVersion: 'latestVersion'
    condition: always()

- task: PowerShell@2
  displayName: 'Exclude Unscannable ARM Templates'
  inputs:
    targetType: 'filePath'
    filePath: '$(System.DefaultWorkingDirectory)\scripts\set-azsk-template-exclusions.ps1'
    arguments: '-AsCsv'
    errorActionPreference: 'stop'
    failOnStderr: false
    ignoreLASTEXITCODE: false
    pwsh: false

- task: AzSKARMTemplateChecker@1
  displayName: 'Run AzSK ARM Template Checker'
  inputs:
    armTemplateFilePath: '$(System.DefaultWorkingDirectory)\templates'
    skipControlsFromFile: '$(System.DefaultWorkingDirectory)\azsk-control-exceptions.csv'
    excludeFiles: '$(ExclusionTemplates)'
    disableAutoUpdate: false

- task: PowerShell@2
  displayName: 'Version ARM Templates'
  inputs:
    targetType: 'filePath'
    filePath: '$(System.DefaultWorkingDirectory)\scripts\version-templates.ps1'
    errorActionPreference: 'stop'
    failOnStderr: false
    ignoreLASTEXITCODE: false
    pwsh: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish ARM Templates'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)\templates' 
    artifactName: 'templates' 
    publishLocation: 'Container'
    parallel: false
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@2
  displayName: 'Copy Example Deployment Templates to Staging Directory'
  inputs:
    sourceFolder: '$(System.DefaultWorkingDirectory)\examples'
    contents: '**\*' 
    targetFolder: '$(Build.ArtifactStagingDirectory)\examples'
    cleanTargetFolder: true 
    overWrite: true
    flattenFolders: false
    condition: "and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))"

- task: PublishBuildArtifacts@1
  displayName: 'Publish Example Deployment Templates'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)\examples' 
    artifactName: 'examples' 
    publishLocation: 'Container'
    parallel: false
    condition: "and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))"

- task: CopyFiles@2
  displayName: 'Copy Scripts to Staging Directory'
  inputs:
    sourceFolder: '$(System.DefaultWorkingDirectory)\scripts'
    contents: '**\*' 
    targetFolder: '$(Build.ArtifactStagingDirectory)\scripts'
    cleanTargetFolder: true 
    overWrite: true
    flattenFolders: false
    condition: "and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))"

- task: PublishBuildArtifacts@1
  displayName: 'Publish Scripts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)\scripts' 
    artifactName: 'scripts' 
    publishLocation: 'Container'
    parallel: false
    condition: "and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))"
